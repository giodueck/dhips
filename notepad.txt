TODO:
    - Add user editing
    - Add instalation routine to help with testing
    - Create alarm table, add alarm insertion to script
    - Create ruleset tables, add default ruleset insertion to script
        - define a parent table from which they inherit
    - Develop main page:
        - control panel
        - config pages

Model:
    https://www.researchgate.net/publication/271070098_Host-based_Intrusion_Detection_and_Prevention_System_HIDPS

Installation
- create database (with default inserts)
- create default user, prompt user to change the default password
    username: admin
    password: admin
- create config directory with 740 permissions and root:www-data owner
- create config files with 740 permissions and root:www-data owner
    connstring: dbname=dhips user=postgres password=postgres
- create /var/log/hips
- install auditd: yum install audit
    start on boot: sudo chkconfig auditd on

Manual

Documentation
- config files

Web Pages
- index.html: redirects to /cgi-bin/login
- /cgi-bin/login: login form
- /cgi-bin/main: main page
- /cgi-bin/logout: redirects to /cgi-bin/login

Login
- index.html redirects to the login script
- login script asks for login info, and takes query argument to display errors like invalid user/password
- login script opens the main script which verifies if the login info is good, if not redirects back to login script
- main script page will be logged in through one of 2 modes:
    1. login (post): on successful login, main will create a new session, which will be stored in a file, and reload in session mode.
    2. session (get): a session will have an expiration date, set to 5 minutes from login originally. Every time the main script or
        a subpage is opened and the expiration date has not been reached, it will be reset to 5 minutes from then.
        If the session has expired or no session is active, the main script will redirect to the login script with
        the current user as an argument, and the user will need to log in again.
failed login attempts should be logged in the dhips log

Logout
- main page will have a logout button, which will close the session immediately.
- a session expires after 5 minutes of inactivity, after which login will be needed again.

User creation and password editing
- main script will have a section for changing password
- main script will have a section for assigning permissions, default user will have admin
- main script will have a secion for admin tasks
- main script sections should either be collapsible or different pages alltogether

Roles
- admin: full privileges. Can add/edit users, edit dhips configurations, view process status, start/restart and stop process
- user: normal privileges. Can edit own password, edit dhips configurations, view process status and start/restart process
- spectator: restricted privileges. Can edit own password and view dhips configurations and process status

HIDPS
- modules will have detector and preventer objects which will handle log writing and module functionality
- alarm types:
    - notice/aviso: reporting of regular activity
    - important/importante: reporting of important activity
    - warning/advertencia: reporting of suspicious activity, take note
    - alert/alerta: reporting of dangerous activity, take action
- warnings will cause the system to log an event into a watchlist, which will make less suspicious but related events
    also show up as warnings. Repeated warnings will escalate to alerts.
- alerts will cause the system to take action, requiring an admin to revert if necesary
- important alarms will involve anything that is of importance but not necesarily suspicious, like the addition of a user

List and description of tasks/modules:
i:      IDS:
            important: changes to binaries and system files, new users
            warning: changes to system binaries and system files
            important: password change
ii:     IDS:
            regular: user connected from localhost
            important: user connected remotely
iii:    IDS:
            important: system in promiscuous mode
            alert: sniffers running
iv:     IDS:
            warning: repeated authentication failure in a short time
            alert: massive authentication failure in a short time
            warning: repeated 404 from the same ip in a short time
            alert: massive mail from one account
v:      IDS:
            warning: repeated mail from one account in a short time
            alert: massive mail from one account in a short time
vi:     IDS:
            warning: process with high memory usage
            alert: process with high memory usage for a long time
vii:    IDS:
            alert: script or executable found in /tmp
            alert: process running from /tmp
viii:   IDS:
            alert: DDOS attack detected
ix:     IDS:
            important: cron job running
x:      IDS:
            warning: repeated authentication failure in a short time
            alert: massive authentication failure in a short time

Alarm path:     /var/log/hips/alarmas.log
Alarm format:   timestamp                       :: code: description            :: location
                [dd]/[mm]/[yyyy] [hh]:[mm]:[ss] :: [module.code]: [description] :: [IP/localhost]
Alarm code:     module(roman).ID(decimal)
                    The roman part makes it clear which module caused the alarm, and the decimal ID uniquely identifies it.
                    Alarms are stored in the database and identified by these IDs.

Prevetion path:     /var/log/hips/prevencion.log
Prevetion format:   timestamp                       :: module: description
                    [dd]/[mm]/[yyyy] [hh]:[mm]:[ss] :: [module]: [description]